package main

import (
	//"database/sql"
	_ "beegoWork/routers"
	"github.com/astaxie/beego"
	"github.com/astaxie/beego/orm"
	//"fmt"
	_ "github.com/lib/pq"
	//"log"
	//"fmt"
	//"github.com/astaxie/beego/logs"
	"github.com/astaxie/beego/logs"
)

//type User struct {
//	Id   int
//	Name string
//}

func init() {
	orm.RegisterDriver("postgres", orm.DRPostgres)
	//orm.RegisterDataBase("default", "mysql", "root:root@/my_db?charset=utf8", 30)
	err := orm.RegisterDataBase("default", "postgres", "postgres://postgres:postgres@127.0.0.1:5432/canadaoffer?sslmode=disable")
    if err != nil {
        logs.Debug("RegisterDataBase error", err)
    }

    orm.Debug = true

	//orm.RegisterModel(new(User))

	//orm.RunSyncdb("default", false, true)

	//
	//db, err := sql.Open("postgres", "user=postgres dbname=canadaoffer sslmode=verify-full")
	//if err != nil {
	//    log.Fatal(err)
	//}
	//
	//user_id := 1
	//rows, err := db.Query("SELECT user_name FROM ca_user WHERE user_id = $1", user_id)
	//fmt.Println(rows)

	//logs.SetLogger("console")
	logs.SetLogger("file", `{"filename":"test.log"}`)
	logs.EnableFuncCallDepth(true)
	logs.Async()
}

func main() {
	//appname := beego.AppConfig.String("appname")
	//fmt.Println(appname)
	//runmode := beego.AppConfig.String("runmode")
	//fmt.Println(runmode)
	//
	//port, err := beego.AppConfig.Int("prod::httpport")
	//if err == nil {
	//	fmt.Println(port)
	//} else {
	//	fmt.Println(err)
	//}

    o := orm.NewOrm()
    logs.Debug(o)

	beego.Run()
}
